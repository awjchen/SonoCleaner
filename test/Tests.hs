{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}

module Main where

import           Test.Tasty
import           Test.Tasty.HUnit

import qualified Data.Text         as T
import qualified Data.Text.Lazy    as TL
import           Text.RawString.QQ (r)

import qualified Model.Ssa         as SSA
import           Model.Default     (defaultModel')

--------------------------------------------------------------------------------

tests :: TestTree
tests = testGroup "tests"
  [ testCase "Read-then-write round trip from .ssa file" $
    assertEqual ".ssa read-write round trip failed"
      (Right testSsa1)
      ( fmap (TL.toStrict . TL.filter (/= '\r') . SSA.printSSA)
        $ SSA.parseSSA "" testSsa1 )

  -- This test does not cover the case where parsing fails, but parsing failure
  -- is covered by the read-then-write round trip test.
  , testCase "Write-then-read round trip from SSA data structure" $
    let ssa = SSA.parseSSA "" testSsa1 in
    assertEqual "SSA write-read round trip failed"
      ssa
      (fmap (TL.toStrict . SSA.printSSA) ssa >>= SSA.parseSSA "")

  , testCase "Parsing of the .ssa file for the default model" $
    assertBool "Failed to parse the .ssa file for the default model"
      (either (const False) (const True) defaultModel')
  ]


main :: IO ()
main = defaultMain tests

--------------------------------------------------------------------------------

testSsa1 :: T.Text
testSsa1 = [r|TITLE:	Trace Segment ASCII
VERSION:	3.10
CREATION DATE:	02/17/17
CREATION TIME:	10:32:53
PARENT FILE:	C:\Users\awchen\Desktop\170216\sono\20170216\20170126_cal08.slb
SAMPLE TIME INTERVAL:	0.002466
UNIT OF TIME INTERVAL:	second
# OF ROW:	32
# OF COLUMN:	6
INDEX COLUMN #:	1
BEGIN DATA:
Time	TRX02:03	TRX02:04	TRX03:02	TRX04:02	NON	
sec	mm	mm	mm	mm	NON		Delineators
0.000000	17.639063	34.185001	17.502422	34.147736	2047.000000	
0.002466	17.639063	34.185001	17.502422	34.147736	2048.000000	
0.004931	17.639063	34.185001	17.502422	34.147736	2048.000000	
0.007397	17.639063	34.197422	17.502422	34.147736	2048.000000	
0.009862	17.639063	34.197422	17.502422	34.147736	2048.000000	
0.012328	17.639063	34.197422	17.502422	34.147736	2047.000000	
0.014793	17.639063	34.185001	17.502422	34.147736	2047.000000	
0.017259	17.639063	34.185001	17.502422	34.147736	2047.000000	
0.019724	17.639063	34.185001	17.502422	34.147736	2047.000000	
0.022190	17.639063	34.185001	17.490000	34.147736	2048.000000	
0.024655	17.639063	34.185001	17.490000	34.147736	2047.000000	
0.027121	17.639063	34.185001	17.490000	34.147736	2047.000000	
0.029586	17.626640	34.185001	17.490000	34.147736	2047.000000	
0.032052	17.639063	34.185001	17.502422	34.147736	2047.000000	
0.034517	17.639063	34.197422	17.502422	34.147736	2047.000000	
0.036983	17.639063	34.197422	17.502422	34.147736	2048.000000	
0.039448	17.639063	34.197422	17.502422	34.147736	2048.000000	
0.041914	17.639063	34.197422	17.502422	34.147736	2047.000000	
0.044380	17.639063	34.185001	17.502422	34.147736	2048.000000	
0.046845	17.639063	34.185001	17.502422	34.147736	2048.000000	
0.049311	17.626640	34.185001	17.502422	34.147736	2047.000000	
0.051776	17.639063	34.185001	17.490000	34.147736	2047.000000	
0.054242	17.639063	34.185001	17.490000	34.147736	2047.000000	
0.056707	17.639063	34.185001	17.490000	34.147736	2048.000000	
0.059173	17.639063	34.185001	17.502422	34.147736	2048.000000	
0.061638	17.639063	34.197422	17.502422	34.147736	2048.000000	
0.064104	17.639063	34.197422	17.502422	34.147736	2048.000000	
0.066569	17.639063	34.197422	17.502422	34.147736	2047.000000	
0.069035	17.639063	34.197422	17.502422	34.147736	2047.000000	
0.071500	17.639063	34.185001	17.502422	34.147736	2048.000000	
0.073966	17.639063	34.185001	17.502422	34.147736	2048.000000	
0.076431	17.639063	34.185001	17.490000	34.147736	2048.000000	
END DATA
|]
